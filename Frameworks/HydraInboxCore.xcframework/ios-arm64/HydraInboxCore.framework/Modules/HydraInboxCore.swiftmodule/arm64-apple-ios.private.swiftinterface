// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-bare-slash-regex -module-name HydraInboxCore
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import Foundation
import HydraCore
@_exported import HydraInboxCore
import HydraPushNotification
import Swift
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public class InboxCoreConfiguration : HydraCore.HydraInboxCoreConfigGenerator {
  public var maximumNotificationCount: Swift.Int?
  public var hydraConfig: any HydraCore.ConfigurationGenerator
  public init(hydraConfig: any HydraCore.ConfigurationGenerator, maximumNotificationCount: Swift.Int?)
  public func update(with config: (any HydraCore.HydraInboxCoreConfigGenerator)?)
  @objc deinit
}
public protocol HydraInboxUIProtocol : AnyObject {
  func refreshNotificationList()
}
public class InboxCore {
  final public let env: HydraCore.Env
  public init(with config: any HydraCore.HydraInboxCoreConfigGenerator, configuredFor env: HydraCore.Env = .dev) throws
  public func handleNotification(notification: HydraCore.HydraNotificationPayload, action: HydraCore.HydraNotificationAction, completion: HydraCore.CompletionHandler? = nil)
  public func handleDeleteAllNotifications(completion: HydraCore.CompletionHandler? = nil)
  public func getUnreadNotificationCount(completion: @escaping HydraCore.FetchCountCompletionHandler)
  public func getNotifications(completion: @escaping HydraCore.FetchRecordsCompletionHandler<HydraCore.HydraNotificationPayload>)
  public func setHydraInboxUIDelegate(delegate: (any HydraInboxCore.HydraInboxUIProtocol)?)
  public func performNotificationAction(notification: HydraCore.HydraNotificationPayload)
  public func performNotificationExpandableCtaAction(notification: HydraCore.HydraNotificationPayload, cta: HydraCore.CTA)
  @objc deinit
}
extension HydraInboxCore.InboxCore : HydraCore.HydraInboxCoreProtocol {
  public func getCurrentNotificationList() -> [HydraCore.HydraNotificationPayload]
  public func refreshNotificationList()
}
extension HydraInboxCore.InboxCore : HydraPushNotification.HydraNotificationsReceiverProtocol {
  public func getReceiverType() -> HydraPushNotification.NotificationsReceiverType
  public func notificationsReceived(with notifications: [HydraCore.HydraNotificationPayload]?)
}
