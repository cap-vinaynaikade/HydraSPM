// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -enable-bare-slash-regex -module-name HydraInboxUI
// swift-module-flags-ignorable: -no-verify-emitted-module-interface
import DeveloperToolsSupport
import Foundation
import HydraCore
import HydraInboxCore
@_exported import HydraInboxUI
import Swift
import SwiftUI
import UIKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public class HydraInboxEmptyNotificationsConfiguration : HydraInboxUI.HydraInboxEmptyNotificationsConfigurator {
  public var notificationsNotFoundLabelTextColor: UIKit.UIColor
  public var notificationsNotFoundLabelFont: UIKit.UIFont
  public init(notificationsNotFoundLabelTextColor: UIKit.UIColor, notificationsNotFoundLabelFont: UIKit.UIFont)
  @objc deinit
}
public enum InboxMessageConfiguration : HydraInboxUI.InboxMessageConfigurator {
  case defaultUnreadConfiguration
  case defaultReadConfiguration
  case customConfiguration(any HydraInboxUI.HydraInboxMessageConfigurator)
  case customReactNativeConfiguration(any HydraInboxUI.HydraInboxMessageReactNativeUIConfigurator)
  public func inboxMessageConfiguration() -> any HydraInboxUI.HydraInboxMessageConfigurator
}
extension HydraInboxUI.InboxMessageConfiguration : Swift.Equatable {
  public static func == (lhs: HydraInboxUI.InboxMessageConfiguration, rhs: HydraInboxUI.InboxMessageConfiguration) -> Swift.Bool
}
public struct HydraInboxMessageUIConfiguration : HydraInboxUI.HydraInboxMessageConfigurator {
  public var cellBackgroundColor: UIKit.UIColor?
  public var cellTitleLabelTextColor: UIKit.UIColor?
  public var cellMessageLabelTextColor: UIKit.UIColor?
  public var cellTimeLabelTextColor: UIKit.UIColor?
  public var cellPrimaryCTABackgroundColor: UIKit.UIColor?
  public var cellWithoutPrimaryCTABackgroundColor: UIKit.UIColor?
  public var cellPositiveCTAButtonBgColor: UIKit.UIColor?
  public var cellPositiveCTAButtonTextColor: UIKit.UIColor?
  public var cellNegativeCTAButtonBgColor: UIKit.UIColor?
  public var cellNegativeCTAButtonTextColor: UIKit.UIColor?
  public var cellNeutralCTAButtonTextColor: UIKit.UIColor?
  public var cellPositiveCTAButtonBorderColor: UIKit.UIColor?
  public var cellNegativeCTAButtonBorderColor: UIKit.UIColor?
  public var cellNeutralCTAButtonBorderColor: UIKit.UIColor?
  public var cellUnreadStatusColor: UIKit.UIColor?
  public var cellTitleLabelFont: UIKit.UIFont
  public var cellMessageLabelFont: UIKit.UIFont
  public var cellCTAButtonsLabelFont: UIKit.UIFont
  public var cellTimeLabelFont: UIKit.UIFont
  public var cellTitleLabelLineLimit: Swift.Int
  public var cellMessageLabelLineLimit: Swift.Int
  public var cellPositiveCTAButtonBorderWidth: CoreFoundation.CGFloat
  public var cellNegativeCTAButtonBorderWidth: CoreFoundation.CGFloat
  public var cellNeutralCTAButtonBorderWidth: CoreFoundation.CGFloat
  public init(cellBackgroundColor: UIKit.UIColor?, cellTitleLabelTextColor: UIKit.UIColor?, cellMessageLabelTextColor: UIKit.UIColor?, cellTimeLabelTextColor: UIKit.UIColor?, cellPrimaryCTABackgroundColor: UIKit.UIColor?, cellWithoutPrimaryCTABackgroundColor: UIKit.UIColor?, cellPositiveCTAButtonBgColor: UIKit.UIColor?, cellPositiveCTAButtonTextColor: UIKit.UIColor?, cellNegativeCTAButtonBgColor: UIKit.UIColor?, cellNegativeCTAButtonTextColor: UIKit.UIColor?, cellNeutralCTAButtonTextColor: UIKit.UIColor?, cellPositiveCTAButtonBorderColor: UIKit.UIColor?, cellNegativeCTAButtonBorderColor: UIKit.UIColor?, cellNeutralCTAButtonBorderColor: UIKit.UIColor?, cellUnReadStatusColor: UIKit.UIColor?, cellTitleLabelFont: UIKit.UIFont, cellMessageLabelFont: UIKit.UIFont, cellCTAButtonsLabelFont: UIKit.UIFont, cellTimeLabelFont: UIKit.UIFont, cellTitleLabelLineLimit: Swift.Int, cellMessageLabelLineLimit: Swift.Int, cellPositiveCTAButtonBorderWidth: CoreFoundation.CGFloat, cellNegativeCTAButtonBorderWidth: CoreFoundation.CGFloat, cellNeutralCTAButtonBorderWidth: CoreFoundation.CGFloat)
}
public struct HydraReactNativeInboxUIConfiguration : HydraInboxUI.HydraInboxMessageReactNativeUIConfigurator {
  public var type: HydraInboxUI.InboxUIConfigurationType
  public var cellBackgroundColor: Swift.String?
  public var cellTitleLabelTextColor: Swift.String?
  public var cellMessageLabelTextColor: Swift.String?
  public var cellTimeLabelTextColor: Swift.String?
  public var cellPrimaryCTABackgroundColor: Swift.String?
  public var cellWithoutPrimaryCTABackgroundColor: Swift.String?
  public var cellPositiveCTAButtonBgColor: Swift.String?
  public var cellPositiveCTAButtonTextColor: Swift.String?
  public var cellNegativeCTAButtonBgColor: Swift.String?
  public var cellNegativeCTAButtonTextColor: Swift.String?
  public var cellNeutralCTAButtonTextColor: Swift.String?
  public var cellPositiveCTAButtonBorderColor: Swift.String?
  public var cellNegativeCTAButtonBorderColor: Swift.String?
  public var cellNeutralCTAButtonBorderColor: Swift.String?
  public var cellUnreadStatusColor: Swift.String?
  public var cellTitleLabelFont: (any HydraInboxUI.HydraFontGenerator)?
  public var cellMessageLabelFont: (any HydraInboxUI.HydraFontGenerator)?
  public var cellCTAButtonsLabelFont: (any HydraInboxUI.HydraFontGenerator)?
  public var cellTimeLabelFont: (any HydraInboxUI.HydraFontGenerator)?
  public var cellTitleLabelLineLimit: Swift.Int
  public var cellMessageLabelLineLimit: Swift.Int
  public var cellPositiveCTAButtonBorderWidth: CoreFoundation.CGFloat
  public var cellNegativeCTAButtonBorderWidth: CoreFoundation.CGFloat
  public var cellNeutralCTAButtonBorderWidth: CoreFoundation.CGFloat
  public init(type: HydraInboxUI.InboxUIConfigurationType, cellBackgroundColor: Swift.String? = nil, cellTitleLabelTextColor: Swift.String? = nil, cellMessageLabelTextColor: Swift.String? = nil, cellTimeLabelTextColor: Swift.String? = nil, cellPrimaryCTABackgroundColor: Swift.String? = nil, cellWithoutPrimaryCTABackgroundColor: Swift.String? = nil, cellPositiveCTAButtonBgColor: Swift.String? = nil, cellPositiveCTAButtonTextColor: Swift.String? = nil, cellNegativeCTAButtonBgColor: Swift.String? = nil, cellNegativeCTAButtonTextColor: Swift.String? = nil, cellNeutralCTAButtonTextColor: Swift.String? = nil, cellPositiveCTAButtonBorderColor: Swift.String? = nil, cellNegativeCTAButtonBorderColor: Swift.String? = nil, cellNeutralCTAButtonBorderColor: Swift.String? = nil, cellUnreadStatusColor: Swift.String? = nil, cellTitleLabelFont: (any HydraInboxUI.HydraFontGenerator)? = nil, cellMessageLabelFont: (any HydraInboxUI.HydraFontGenerator)? = nil, cellCTAButtonsLabelFont: (any HydraInboxUI.HydraFontGenerator)? = nil, cellTimeLabelFont: (any HydraInboxUI.HydraFontGenerator)? = nil, cellTitleLabelLineLimit: Swift.Int, cellMessageLabelLineLimit: Swift.Int = 0, cellPositiveCTAButtonBorderWidth: CoreFoundation.CGFloat, cellNegativeCTAButtonBorderWidth: CoreFoundation.CGFloat, cellNeutralCTAButtonBorderWidth: CoreFoundation.CGFloat)
}
public struct HydraFont : HydraInboxUI.HydraFontGenerator {
  public var size: CoreFoundation.CGFloat
  public var name: Swift.String
  public init(size: CoreFoundation.CGFloat, name: Swift.String)
  public func uiFont() -> UIKit.UIFont
  public static func defaultFont(fontSize size: CoreFoundation.CGFloat = 16.0) -> UIKit.UIFont
}
@_Concurrency.MainActor @preconcurrency public struct NotificationCenterView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s12HydraInboxUI22NotificationCenterViewV4bodyQrvp", 0) __
}
public class InboxUICore {
  public init(with inboxCore: HydraInboxCore.InboxCore, configuration: any HydraInboxUI.HydraInboxUIConfigurator)
  public func showNotificationCenter(with navigationController: UIKit.UINavigationController)
  public func getNotificationCenter() -> UIKit.UIViewController
  public func notificationCenterSwiftUIView() -> HydraInboxUI.NotificationCenterView
  public func setHydraInboxUIDelegate(delegate: any HydraInboxCore.HydraInboxUIProtocol)
  @objc deinit
}
public protocol InboxMessageConfigurator {
  func inboxMessageConfiguration() -> any HydraInboxUI.HydraInboxMessageConfigurator
}
public protocol HydraInboxMessageConfigurator {
  var cellBackgroundColor: UIKit.UIColor? { get set }
  var cellTitleLabelTextColor: UIKit.UIColor? { get set }
  var cellMessageLabelTextColor: UIKit.UIColor? { get set }
  var cellTimeLabelTextColor: UIKit.UIColor? { get set }
  var cellPrimaryCTABackgroundColor: UIKit.UIColor? { get set }
  var cellWithoutPrimaryCTABackgroundColor: UIKit.UIColor? { get set }
  var cellPositiveCTAButtonBgColor: UIKit.UIColor? { get set }
  var cellPositiveCTAButtonTextColor: UIKit.UIColor? { get set }
  var cellNegativeCTAButtonBgColor: UIKit.UIColor? { get set }
  var cellNegativeCTAButtonTextColor: UIKit.UIColor? { get set }
  var cellNeutralCTAButtonTextColor: UIKit.UIColor? { get set }
  var cellPositiveCTAButtonBorderColor: UIKit.UIColor? { get set }
  var cellNegativeCTAButtonBorderColor: UIKit.UIColor? { get set }
  var cellNeutralCTAButtonBorderColor: UIKit.UIColor? { get set }
  var cellUnreadStatusColor: UIKit.UIColor? { get set }
  var cellTitleLabelFont: UIKit.UIFont { get set }
  var cellMessageLabelFont: UIKit.UIFont { get set }
  var cellCTAButtonsLabelFont: UIKit.UIFont { get set }
  var cellTimeLabelFont: UIKit.UIFont { get set }
  var cellTitleLabelLineLimit: Swift.Int { get set }
  var cellMessageLabelLineLimit: Swift.Int { get set }
  var cellPositiveCTAButtonBorderWidth: CoreFoundation.CGFloat { get set }
  var cellNegativeCTAButtonBorderWidth: CoreFoundation.CGFloat { get set }
  var cellNeutralCTAButtonBorderWidth: CoreFoundation.CGFloat { get set }
}
public enum InboxUIConfigurationType {
  case read
  case unread
  public static func == (a: HydraInboxUI.InboxUIConfigurationType, b: HydraInboxUI.InboxUIConfigurationType) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public protocol HydraInboxMessageReactNativeUIConfigurator {
  var type: HydraInboxUI.InboxUIConfigurationType { get set }
  var cellBackgroundColor: Swift.String? { get set }
  var cellTitleLabelTextColor: Swift.String? { get set }
  var cellMessageLabelTextColor: Swift.String? { get set }
  var cellTimeLabelTextColor: Swift.String? { get set }
  var cellPrimaryCTABackgroundColor: Swift.String? { get set }
  var cellWithoutPrimaryCTABackgroundColor: Swift.String? { get set }
  var cellPositiveCTAButtonBgColor: Swift.String? { get set }
  var cellPositiveCTAButtonTextColor: Swift.String? { get set }
  var cellNegativeCTAButtonBgColor: Swift.String? { get set }
  var cellNegativeCTAButtonTextColor: Swift.String? { get set }
  var cellNeutralCTAButtonTextColor: Swift.String? { get set }
  var cellPositiveCTAButtonBorderColor: Swift.String? { get set }
  var cellNegativeCTAButtonBorderColor: Swift.String? { get set }
  var cellNeutralCTAButtonBorderColor: Swift.String? { get set }
  var cellUnreadStatusColor: Swift.String? { get set }
  var cellTitleLabelFont: (any HydraInboxUI.HydraFontGenerator)? { get set }
  var cellMessageLabelFont: (any HydraInboxUI.HydraFontGenerator)? { get set }
  var cellCTAButtonsLabelFont: (any HydraInboxUI.HydraFontGenerator)? { get set }
  var cellTimeLabelFont: (any HydraInboxUI.HydraFontGenerator)? { get set }
  var cellTitleLabelLineLimit: Swift.Int { get set }
  var cellMessageLabelLineLimit: Swift.Int { get set }
  var cellPositiveCTAButtonBorderWidth: CoreFoundation.CGFloat { get set }
  var cellNegativeCTAButtonBorderWidth: CoreFoundation.CGFloat { get set }
  var cellNeutralCTAButtonBorderWidth: CoreFoundation.CGFloat { get set }
}
public protocol HydraInboxEmptyNotificationsConfigurator {
  var notificationsNotFoundLabelTextColor: UIKit.UIColor { get set }
  var notificationsNotFoundLabelFont: UIKit.UIFont { get set }
}
public protocol HydraInboxUIConfigurator {
  var unreadMessageConfigurationType: HydraInboxUI.InboxMessageConfiguration { get set }
  var readMessageConfigurationType: HydraInboxUI.InboxMessageConfiguration { get set }
  var unreadMessageConfiguration: any HydraInboxUI.HydraInboxMessageConfigurator { get set }
  var readMessageConfiguration: any HydraInboxUI.HydraInboxMessageConfigurator { get set }
  var placeholderImage: UIKit.UIImage? { get set }
  var notificationsNotFoundConfiguration: any HydraInboxUI.HydraInboxEmptyNotificationsConfigurator { get set }
}
public protocol HydraFontGenerator {
  var size: CoreFoundation.CGFloat { get set }
  var name: Swift.String { get set }
  func uiFont() -> UIKit.UIFont
}
public class HydraInboxUIConfiguration : HydraInboxUI.HydraInboxUIConfigurator {
  public var unreadMessageConfigurationType: HydraInboxUI.InboxMessageConfiguration
  public var readMessageConfigurationType: HydraInboxUI.InboxMessageConfiguration
  public var unreadMessageConfiguration: any HydraInboxUI.HydraInboxMessageConfigurator
  public var readMessageConfiguration: any HydraInboxUI.HydraInboxMessageConfigurator
  public var notificationsNotFoundConfiguration: any HydraInboxUI.HydraInboxEmptyNotificationsConfigurator
  public var placeholderImage: UIKit.UIImage?
  public init(unreadMessageConfigType: HydraInboxUI.InboxMessageConfiguration, readMessageConfigType: HydraInboxUI.InboxMessageConfiguration, notificationsNotFoundConfiguration: (any HydraInboxUI.HydraInboxEmptyNotificationsConfigurator)? = nil, placeholderImage image: UIKit.UIImage? = nil)
  @objc deinit
}
extension HydraInboxUI.NotificationCenterView : Swift.Sendable {}
extension HydraInboxUI.InboxUIConfigurationType : Swift.Equatable {}
extension HydraInboxUI.InboxUIConfigurationType : Swift.Hashable {}
